/****************************************************************************   
 * FILE NAME:   winform.def
 * MODULE NAME: WinForm
 * PROGRAMMER:  CL
 * DESCRIPTION: window form handling: buttons, panels etc.
 * REVISION:    01.00
 ****************************************************************************/
          /*==========================================*
           *         I N T R O D U C T I O N          *
           *==========================================*/
#ifndef __WinForm_DEF
  #define __WinForm_DEF
/** This module (WINFORM) deals with three objects: panels, buttons and forms.
 The panel is rectangle placed into display's specific coordinates, that has
 some kind of frame (see enum PanelStyle) and client area image and/or text
 (for structures Text and Icon see GRPHTEXT.H). Optionally, the application
 specified function  can be supplied to show application-dependant image
 (e.g. running string).
 The button is a clickable panel, i.e. button will be activated (
 application-supplied button handler function will be called) if one of the
 events specified in event array occured.
 Currently there are two types of the events : keyboard and timer, but in the
 future other types of events can be added (e.g. CardReader/BarCodeReader
 etc.).
 The form is a set of the buttons and the set of the exit events (events
 which will cause the form to be removed)

 *********************************************************************/


          /*==========================================*
           *         P A R A M E T E R S              *
           *==========================================*/
          /*==========================================*
           *           D E F I N I T I O N S          *
           *==========================================*/

#define MAX_PANELS_IN_WIN  32
#define FRAME_COLOR_LIGHT  LIGHTGRAY
#define FRAME_COLOR_DARK   DARKGRAY

          /*==========================================*
           *      T Y P E   D E C L A R A T I O N     *
           *==========================================*/
typedef enum
{
  IMAGE_TEXT,        /*icon from the left, text from the right */
  TEXT_IMAGE,        /*text from the left, icon from the right */
  TEXT_UNDER_IMAGE,  /*icon in the top, text in the bottom */
  IMAGE_ONLY,        /* Only Icon Image */
  TEXT_ONLY          /* Only Icon Text */
} IconStyle;

typedef struct
{
  Text  text;
  byte *image;       /* image buffer address*/
  usint width;       /* in pixels */
  usint height;      /* in pixels */
  long  block_color; /* the color which will not be put into display.
                      * If == TRANSPARENT_NOT_USED, it will not be used, and all colors will be copied (see GrphText_ShowIcon).
                      * 
                      * The 'max color' corresponds to Icon.color_depth:
                      * color depth :  1   2   4    8
                      * max color   :  1   3   15   255                  */
  IconStyle style;
  byte      color_depth;/*1/2/4/8*/
} Icon;


/*Panel related structures and enums: */
typedef enum
{
  PANEL_NO_FRAME              = 0,     /*default*/
  PANEL_SIMPLE_FRAME,
  PANEL_CLICKABLE_2D,
  PANEL_CLICKABLE_3D,
  PANEL_CLICKABLE_2D_NO_FRAME = 10,    /* Same 'thickness' as 2D, but transparent. Client area isn't shifted (for marking the icon) */
  PANEL_3D_OVAL,                       /* None-clickable (for color display). Remember: color != TRANSPARENT_NOT_USED !!! */
  PANEL_FRAME_MAX
} PanelStyle;


typedef struct
{
  Rectangle  area; /*coordinates relative to the current window */
  PanelStyle panel_style;/*panel's frame : no frame, 3D, 2D etc. */
  long       color; /*panel's background*/
  long       frame_light;/*panel's frame light  color (SIMPLE/2D/3D)*/     /* If(panel_style==PANEL_3D_OVAL) - Color of Side of Button.         */
  long       frame_dark; /*panel's frame shadow color (3D only)*/          /* If(panel_style==PANEL_3D_OVAL) - Color of Anti-Aliasing of Button.*/
  Icon      *icon;
  void     (*applShowFunc)(Rectangle clientArea);
} Panel;

/*Button related structures and enums: */

typedef enum
{
  EVENT_EMPTY,        /* no event                   */
  EVENT_KEY,          /* keyboard                   */
  EVENT_TIME,         /* timeout                    */
  EVENT_TOUCH,        /* touch panel                */
  EVENT_CARD,         /* mag.stripe                 */
  EVENT_ICC,          /* smart card                 */
  EVENT_COM,          /* communication              */
  EVENT_CYCLIC_MENU,  /* participate in cyclic menu */
  EVENT_TIME_MS       /*timeout in ms*/
} EventType;

typedef enum
{
  TOUCHED,
  MOVED_INTO,
  MOVED_OUT,
  TOUCH_OFF,
} TouchType;

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !!!                                                          !!!
   !!!  If the Event type is used to initialize a constant      !!!
   !!!  Event structure the ONLY member of the union that       !!!
   !!!  can be initialized is key. Therefore it is recommended  !!!
   !!!  NOT TO INITIALIZE Event structures as constants but     !!!
   !!!  rather in run-time.                                     !!!
   !!!                                                          !!!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

typedef struct 
{
  EventType type; /*key, timeout etc.*/
  union
  {
    byte    key;    /*hot key*/
    usint   timeout;/*timeout in sec*/
    /*touch - we don't need the value, since the coordinates are in Button.panel*/

    /*mag stripe  - if such event present, it will be triggered when a card swiped*/
    byte    icc_status;/*on which status : ICC_EMPTY, ICC_NEEDS_RESET, ICC_OK etc. */
    /*com event ???? */
    byte cyclic_menu_pos;   /* position in the cyclic menu - start from 1 till MAX_PANELS_IN_WIN */  
  } value;

} Event;

typedef enum
{
  FORM_REDRAW_ITEM = 0x0000, /*the button index to redraw will be in the least byte*/
  FORM_REDRAW_ALL  = 0x4000,
  FORM_EXIT        = 0x8000,
  FORM_CONTINUE    = 0xC000
} ButtonRetVal;


typedef struct
{
  Panel   panel;
  Event  *activate; /*set of events which will activate button's handler*/
  byte    num_of_events;/*size of the 'activate' array*/

  ButtonRetVal (*handler)(void *parameters);
  /*return value: TRUE  -- exit from the form
   *              FALSE -- do not exit from the form*/
  void   *parameters;
} Button;

typedef struct
{
  Button *item;         /*array of panels to show*/
  Event  *exit;         /*the set of events that will terminate the form*/
  byte    num_of_items; /*size of 'item' array */
  byte    num_of_events;/*size of 'exit' array */

} Form;


#endif
