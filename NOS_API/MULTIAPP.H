/****************************************************************************
 *                                                                          *
 * FILE NAME:   MULTIAPP.H                                                  *
 *                                                                          *
 * MODULE NAME: MULTIAPP                                                    *
 *                                                                          *
 * PROGRAMMER:  Oren Sokoler                                                *
 *                                                                          *
 * DESCRIPTION: Multi Application manager public declarations               *
 *                                                                          *
 * REVISION:    01.00 18/02/01.                                             *
 *                                                                          *
 ****************************************************************************/
#ifndef _MULTIAPP_H_
  #define _MULTIAPP_H_
          /*==========================================*
           *         I N T R O D U C T I O N          *
           *==========================================*/

/* This file declares all functions that are exported to the NOS API */

          /*==========================================*
           *           D E F I N I T I O N S          *
           *==========================================*/

          /*==========================================*
           *      T Y P E   D E C L A R A T I O N     *
           *==========================================*/


/* Public functions return value */

typedef enum {

  MULTIAPP_OK    ,
  MULTIAPP_EXIST ,
  MULTIAPP_FAIL  ,
  MULTIAPP_NOS_MIN_VER_ERROR,
  MULTIAPP_SIGNATURE_ERROR,
  MULTIAPP_NOT_EXIST ,

} MultiAppRetVal;


#include multiapp_def
#include dlmlinkr_def
#include evd_hd_def

           /*=========================================*
            *   F U N C T I O N  P R O T O T Y P E S  *
            *=========================================*/

/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_ConfigureHotKey
 *
 * DESCRIPTION:   This function connects the application to a specific hot
 *                key of the Nurit keyboard. This function pops up a window
 *                that asks the user to press a key, this key is then binded
 *                to the called application. Every time this key is pressed
 *                a hot key event is generated by the NOS for that application
 *
 * PARAMETERS:    HotKey structure:
 *                  EvdName  - Application name
 *                  Key      - Key combination to add
 *                  HotKeyID - Hot key ID to be passed to the application when
 *                             the NOS calls the hot key event handler.
 *                  Mode     - Mode of operation ( Enable/Disable )
 *
 * RETURN:        MULTIAPP_OK    - Configuration of hot key was succesful.
 *                MULTIAPP_FAIL  - Configuration of hot key was not succesful:
 *                                 Bad parameters, Application not registered
 *                                 for hot key event, hot key is MENU/FUNC,
 *                                 Application name not found in list,
 *                                 Maximum hot keys already defined, or an
 *                                 internal error.
 *                MULTIAPP_EXIST - Hot key combination already exist.
 *
 * NOTES:         none.
 *
 * ------------------------------------------------------------------------ */
MultiAppRetVal MultiApplMngr_ConfigureHotKey( MultiAppHotKey *HotKey );

/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_ConnectHotKey
 *
 * DESCRIPTION:   This function connects the application to a specific hot
 *                key of the Nurit keyboard. This function pops up a window
 *                that asks the user to press a key, this key is then binded
 *                to the called application. Every time this key is pressed
 *                a hot key event is generated by the NOS for that application
 *
 * PARAMETERS:    Mode     - Mode of operation (enable , disable , etc ...)
 *                HotKeyID - Hot key ID to be passed to the application when
 *                           the NOS calls the hot key event handler.
 *
 * RETURN:        MULTIAPP_OK   - Connection of hot key was succesful.
 *                MULTIAPP_FAIL - Can't bind a hot key to the application.
 *
 * NOTES:         none.
 *
 * ------------------------------------------------------------------------ */
MultiAppRetVal MultiApplMngr_ConnectHotKey(MultiAppKeyMode Mode , usint HotKeyID);

/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_SetTimer
 *
 * DESCRIPTION:   This function sets a timer running for the application. If
 *                the timer reaches zero (Time has elapsed) the NOS generates
 *                a timer event for the application. The timer event handler
 *                is called with the TimerID that was provided by the 
 *                application.
 *
 * PARAMETERS:    Mode    - Mode of operation (enable , disable , etc ...)
 *                TimerID - Timer ID provided by the application for 
 *                          identifying the timer event
 *                Time    - Time to generate the timer event (in milliseconds)
 *
 * RETURN:        MULTIAPP_OK   - Timer events will be generated as requested
 *                MULTIAPP_FAIL - Timer events can't be generated.
 *
 * NOTES:         The timer event will be generated every Time milliseconds.
 *
 * ------------------------------------------------------------------------ */
MultiAppRetVal MultiApplMngr_SetTimer(MultiAppTimerMode Mode , usint TimerID , ulint Time);

/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_GetHotKey
 *
 * DESCRIPTION:   Returns the key value that was connected to the
 *                HotKeyID with the function MultiApplMngr_ConnectHotKey
 *
 * PARAMETERS:    HotKeyID - Application's hot key ID
 *
 * RETURN:        == 0 - No key is connected to HotKeyID
 *                != 0 - The key value that is connected to the
 *                       HotKeyID as defined in NURIT.DEF 
 *
 * NOTES:         none.
 *
 * ------------------------------------------------------------------------ */
byte MultiApplMngr_GetHotKey(usint HotKeyID);
/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_PostEvent
 *
 * DESCRIPTION:   Post Inter application event
 *
 * PARAMETERS:    ApplEvent - Inter application event pointer.
 *
 * RETURN:        MULTIAPP_OK   - Msg was received by system and will be send
 *                MULTIAPP_FAIL - Msg was NOT received by system and will NOT be send.
 *
 * NOTES:         none.
 *
 * ------------------------------------------------------------------------ */
MultiAppRetVal MultiApplMngr_PostEvent(evdApplEvent * ApplEvent);
/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_SetCardrRdrEvent
 *
 * DESCRIPTION:   Set card reader event options
 *
 * PARAMETERS:    Options - CardRdrEventOptions struct
 *
 * RETURN:        MULTIAPP_FAIL if not able to store params else return MULTIAPP_OK.
 *
 * NOTES:         none.
 *
 * ------------------------------------------------------------------------ */
MultiAppRetVal  MultiApplMngr_SetCardRdrEvent(CardRdrEventOptions * Options);
/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_SetWinFormOption
 *
 * DESCRIPTION:   Set WinForm options for the choose application menu
 *
 * PARAMETERS:    Options - WinFormtOptions struct
 *
 * RETURN:        MULTIAPP_FAIL if not able to store params else return MULTIAPP_OK.
 *
 * NOTES:         none.
 *
 * ------------------------------------------------------------------------ */
MultiAppRetVal  MultiApplMngr_SetWinFormOption(evdWinFormOptions * Options);

/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_CallFunc
 *
 * DESCRIPTION:   This function calls the application's function.
 *                It can be used to call an application's function from 
 *                another application.
 *
 * PARAMETERS:    ApplName - The Application name to be called if ApplName is BROADCAST 
 *		                     the messege will be passed to all applications.
 *				  DataPtr and Data - data to called application
 *
 * RETURN:        MULTIAPP_FAIL if not able to call function else
 *                return MULTIAPP_OK.
 *
 * NOTES:         none.
 *
 * ------------------------------------------------------------------------ */
MultiAppRetVal MultiApplMngr_CallFunc( char *ApplName, void *DataPtr, ulint Data );
/* --------------------------------------------------------------------------
 *
 * FUNCTION NAME: MultiApplMngr_GetApplList
 *
 * DESCRIPTION:   Return arrey of pointers to all application exist in terminal
 *
 * RETURN:        Number of application exist 0 if no multi application  mode
 *
 * NOTES:         Len of ApplList arrey must be at last 10 longs long (40 bytes).
 *                (
 *                  call this function in this way:
 *                  EvDHeaderType  *ApplList[10];
 *                  MultiApplMngr_GetApplList(ApplList);
 *                )
 *
 * ------------------------------------------------------------------------ */
sint MultiApplMngr_GetApplList(EvDHeaderType **ApplList);

 #ifdef __NOS__
   #include multiapp_nos
 #endif
#endif